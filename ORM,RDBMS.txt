ORM, RDMS( schema, table, key(primary, foreign..) )
ORM이란 객체(OOP의 Object)와 관계(관계형 데이터베이스)와의 설정
-> 기본에 충실하기 위해 사용 (Basic to basics) 
 : 정보들을 객체에 담아 보관할 때 영구적으로 저장하기 위해 테이블에 저장을 함.
  하지만 저장시 테이블과 객체간의 이질성이 발생하게 됨
->편리하다. 객체지향적인 시스템을 위해 관계형 데이터베이스의 설계에 변화를 준다.
객체와 데이터베이스를 따로 생각하는 것이 아니라 하나의 덩어리로 인지하는 것.
장점
1. 좀더 직관적이다. (가독성과 필요없는 코드들의 생략으로 생산성이 증가)
2. 재사용 및 유지보수의 편리성 증가 (독립적이며 객체들을 재활용 가능)
3. DBMS에 대한 증속성이 줄어든다. (적은 리스크와 시간이 소요, 자바로 사용 가능)
단점
1. ORM만으로는 서비스를 구현하기 어렵다.(설계 신중)
2. 프로시저가 많은 시스템에선 ORM의 객체 지향적인 장점을 활용하기 어렵다.

RDBMS(관계형 데이터베이스)
1. Schema : 자료의 구조, 자료의 표현 방법, 자료 간의 관계를 형식 언어로 정의한 구조
   ->DB의 객체를 담는 곳 (그래서 DB객체를 스키마 객체라고 부르기도 함)
   ->주어진 설정에 따라 스키마 생성하며, 사용자가 자료를 저장,조회,삭제,변경시 스키마를 참조하여 명령 수행
  1) 외부 스키마(External Schema) : 개발자나 사용자 입장에서 DB의 모습으로 조직의 일부분을 정의
  2) 개념 스키마(Conceptual Schema) : 필요로하는 데이터를 통합한 조직 전체의 DB 구조를 논리적으로 정의한 것
  3) 내부 스키마(Internal Schema) : DB의 물리적 저장 형태를 기술하는 것

2. Table : 데이터를 카테고리별로 저장하기 위해 열과 행으로 구조화하여 보관하는 DB의 구성 요소
 열 : 카테고리
 행 : 한 객체에 대한 모든 정보를 담음

1 vs 2 
공통:무엇인가를 담는 그릇 역할
테이블 : 열을 정의 // 스키마 : 테이블 정의

3. Key : 각 로우에는 고유 키가 있다. 로우 끼리으 연결 -> 연결된 로우의 고유 키를 위한 칼럼을 추가하여 이루어짐
 1) 기본 키(primary key) : 주 키 또는 프라이머리 키라고 하며, 관계형 데이터베이스에서 조(레코드)의 식별자로 이용하기에 가장 적합한 것을
 관계 (테이블)마다 단 한 설계자에 의해 선택, 정의된 후보 키를 말한다.  
 2) 외래 키(외부 키, Foreign Key) : 한 테이블의 필드(attribute) 중 다른 테이블의 행(row)을 식별할 수 있는 키를 말한다.
 3) 수퍼 키 (Super Key) : 레코드를 고유하게 식별하는 데 사용되는 속성 또는 속성의 조합
 4) 후보 키 : 최소 수퍼 키 또는 기성 수퍼 키로 정의 할 수 있습니다. 즉, 레코드를 고유하게 식별하지만 해당 하위 집합 중 어느 것도 고유하게 레코드를 식별 할 수없는 특성 또는 속성 조합
 5) 복합 키 : 여러 속성을 사용하여 기본 키를 작성한 경우 해당 기본 키