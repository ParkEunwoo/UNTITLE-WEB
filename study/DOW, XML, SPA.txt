* DOM, XML, SPA(Single Page Application)

1. DOM (Document Object Model)
  1.1 개념
	- 문서 객체 모델 (Document Object Model)로 HTML, XML 문서의 프로그래밍
         인터페이스, API.
	- 문서의 구조적 형태를 제공함.
	- JS, HTML 같은 스크립트 언어를 사용해 문서 내용과 시각적 표현을 수정할 수 있게함.
	- HTML 문서의 구조를 문서 객체 모델이라 한다
	  * 참고로 HTML에서 작성된 스타일은 정적, 자바스크립트에서 작성된 스타일을 동적.
	- 동적으로 오브젝트를 생성.
	- 이미 처리가 완료되어 사용자에게 출력된 문서를 다시 수정해서 다시 출력할 수 있다.
	- DOM은 구조화된  Nodes, Property, Method 를 갖고있는 Objects로 문서를 표현
	- DOM은 프로그래밍 언어는 아니지만 DOM이 없다면 자바스크립트 언어는 웹페이지 또는
	 XML 페이지 및 요소들과 관련된 모델이나 개념들에 대한 정보를 갖지 못하게 된다. 
	- API = DOM + JS

	= 쉽게 말해서 DOM 을 통해서 각 스크립트나 개발 언어에서 페이지의 내용이나 기타 위젯 같은
	 요소들을 쉽게 '동적으로' 컨트롤(변경/추가/삭제) 할 수 있다는 것. 
	= 그리고 HTML에 적용되느냐 JS에 적용되느냐에 따라 조금 형태나 방식이 다른듯함.
 * https://developer.mozilla.org/ko/docs/Gecko_DOM_Reference/%EC%86%8C%EA%B0%9C // 참고 ㄱㄱ

2. XML (eXtensible Markup Language)
  2.1 개념
	- 정의 : 확장 가능 마크 업 언어 / 컴퓨터 텍스트 구조 표시 시스템
	- HTML을 획기적으로 개선해서 만든 언어.
	- 홈페이지 구축기능, 검색기능등이 향상. 웹 페이지의 추가와 작성이 편리해짐.
	- 클라이언트 시스템의 복잡한 데이터 처리를 쉽게함.
	- 데이터에 의미를 부여하는 메타데이터를 기술할 수 있음.
	- HTML은 웹 페이지에서 데이터베이스처럼 구조화된 데이터를 지원할 수 없지만
	 XML은 사용자가 구조화된 데이터베이스를 뜻대로 조작할 수 있다.
	- 구조적으로 SGML 문서 형식을 따른다.
	- XML은 SGML의 파생형.
	- 둘 동일한 목적을 가졌으나 인터넷 환경과 새로운 컴퓨팅 환경에 맞게 확장성을 더한 것.
	- 웹 환경이 아니라 네트워크 환경(TCP/IP)에서도 사용빈도가 높아지는 편

	= 핵심은 원래는 불가능했던 구조화된 복잡한 데이터를 쉽게 처리할 수 있게 됐다는 것.

3. SPA (Single Page Application)
  3.1 개념
	- 서버로부터 완전한 새로운 페이지를 불러오지 않고 현재의 페이지를 동적으로 다시 
	 작성함으로서 사용자와 소통하는 웹 애플리케이션이나 웹사이트를 말함.
	- 쉽게 하나의 페이지로 이루어진 애플리케이션을 의미함.
	- 따라서 페이지의 업데이트를 위해 부가적인 서버 요청을 요하는 것이 아니라,
	 유저와 JS의 상호작용을 통해 브라우저에서만 이루어지는 것.
	- 서버로 보내지는 요청은 페이지에 출력되는 데이터를 위한 AJAX와 JSON을 이용한 통신뿐임.
	- 이로서 연속되는 페이지들 간의 UX 의 간섭을 막아주고 애플리케이션이 응용 소프트웨어처럼
	 동작하도록 해준다.
	- HTML, JS, CSS 등 필요한 모든 코드를 하나의 페이지로 불러오거나,
	 적절한 자원들을 동적으로 불러들여 필요하면 문서에 추가. 보통 사용자 동작에 응답하는 방식.
	- 

  3.2 장단점
	- 장점 : 
	 + 페이지의 전환이 클라이언트에서만 이루어지기에 부드럽다.
	 + 개발자가 웹 응용 프로그램과 네이티브 모바일 응용 프로그램에 동일한 백 엔드 코드를
	  재사용 할 수 있어서 모바일 응용 프로그램을 만드는 것이 더 쉬움.
	 + 모든 로컬 스토리지를 효과적으로 캐시할 수 있음.
	 + 하나의 요청을 통해서 모든 데이터를 저장한 후 사용가능하여 오프라인에서도 작동할 수 있음.
	- 단점 : 
	 + 첫 요청에 대한 응답이 일반 웹 앱보다 느리다.	
	 + 사용자가 브라우저에서 JS를 사용불가능하게 설정하면 제대로 작동할 수 없다.
	 + 기존 응용 프로그램과 비교하면 안전성이 떨어짐. 공격자가 다른 사용자의 
	  웹 응용 프로그램에 클라이언트 측 스크립트를 삽입 가능.
	 + 무거운 클라이언트 프레임 워크가 클라이언트에 로드 되어야해서 다운로드 속도가 느리다.

	    
	


	
	