1. Parsing : 데이터를 조립해 원하는 데이터를 빼내는 프로그램을 하는 것
-> 일련의 문자열을 의미있는 token으로 분해하고 그것들로 이루어진 Parse tree를 만드는 과정
특정 문서(XML, HTML 등)을 읽어 다른 프로그램이나 서브루틴이 사용할 수 있는 내부의 표현 방식으로 변환해 주는 
컴파일러의 일부로 원 프로그램의 명령문이나 온라인 명령문, HTML 문서 등에서 Markup Tag 등을 입력으로 받아들여 구문을 해석할 수 있는 단위로 분할해주는 역할 ( 한 데이터를 다른 모양으로 가공하기와 같은)
- 형변환과는 다른 의미이다. 저장 구소가 유사한 경우에만 하는 것.
//https://m.blog.naver.com/PostView.nhn?blogId=jinhyuk2174&logNo=70188891502&proxyReferer=https%3A%2F%2Fwww.google.co.kr%2F

2. RDBMS :  Relation Database Management System : 관계형 데이터 베이스 관리 시스템 : 관계형 모델을 기반
: 행과 열을  가지는 표 형식 데이터를 저장하고 다루는 형태

<SQL과 NoSQL의 차이>
* SQL : RDBMS에서 데이터를 조작하고 쿼리하는 표준 수단
1. 데이터 모델 : 행과 열로 구성된 테이블
2. 최적의 워크로드 : 일관된 온라인 트랜잭션 프로세싱 애플리케이션을 위해 설계되어 이상적이다.
3. ACID 속성 : 원자가 : 완벽 실행 혹은 미실행 / 일관성 : 데이터 베이스 스키마를 준수하도록 요구/ 격리성 : 동시에 일어나도 각기 별도로 실행/ 내구성 : 예기치 못한 오류 시 마지막으로 알려진 상태로 복구하는 기능
4. 확장 : 하드웨어의 계산 성능을 높이거나 읽기 전용 워크로드의 복제물을 추가하여 확장
5. API : 데이터를 저장 및 검색하기 위한 요청은 SQL을 준수하는 쿼리 사용. 쿼리는 RDBMS에 의해 파싱되고 실행.

*NoSQL : SQL에서 발전한 것 : 특정 데이터 모델에 대해 특정 목적에 맞추워 구축되는 데이터 베이스
-> 비관계형 데이터 베이스-> 문서, 그래프, 키 값 등 다양한 데이터 형태를 사용할 수 있음 : 그래서 데이터 일관성 제약 일부를 완화함
NoSQL 데이터베이스는 탁월한 사용자 경험을 제공하기 위하여 유연성과 확장성을 비롯해 고성능의 매우 기능적인 데이터베이스를 필요로 하는 모바일, 웹이나 게이밍과 같은 다양한 현대적인 애플리케이션에 적합합니다.
1. 데이터 모델 : 문서, 그래프, 키 값, 인 메모리, 검색을 포함하여 데이터 모델을 제공
2. 최적의 워크로드 : 반정형 데이터에서 분석을 위해 설계되었습니다.
3. ACID 속성 : 단일 인스턴스의 한계를 넘어 수평으로 확장 가능 -> 낮은 지연시간, 높은 처리량
4. 확장 : 무제한적인 범위에서 일관된 성능을 제공하는 처리량 제고를 위해 분산형 아키텍처를 사용해 키 값 엑세스 패턴이 확장 가능하기 때문에 분할성
5. API : 객체 기반으로 인 메모리 데이터를 쉽게 저장 및 검색 가능. 