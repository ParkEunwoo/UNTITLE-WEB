#브라우저 동작 원리

(1) 유저인터페이스 : 사용자가 기능을 쉽게 이용할 수 있도록 만든 UI 요소들
(주소 표시줄, 이전/다음 버튼, 북마크 메뉴 등)
(2) 브라우저 엔진 : 유저인터페이스와 랜더링 엔진 사이의 동작을 제어함
(3) 랜더링 엔진
- 요청한 콘텐츠를 표시할 수 있도록 하는 역할, 사용자가 HTML 파일을 요청하면 HTML과 CSS를 파싱(응답 파일)하여 화면에 표시해줌
- 크롬은 각 탭마다 별도의 랜더링 엔진 인스턴스를 유지함, 각 탭은 독립된 프로세스로 처리(그래서 탭이 늘어날수록 시스템 성능 저하가....)
(4) 통신 : 네트워크 호출에 사용됨
(5) UI 백앤드 : 브라우저의 기본 장치(창, 콤보박스 등)를 그릴 때 사용함, OS에 따라 UI가 바뀜
(6) 자바스크립트 해석기 : 자바스크립트 코드를 파싱하고 실행하는 역할
(7) 자료 저장소 : 쿠키와 같은 자료들을 저장하는 계층



#디자인패턴
소프트웨어 공학에서 소프트웨어 디자인에서 특정 문맥에서 공통적으로 발생하는 문제에 대해 재사용 가능한 해결책이다. 소스나 기계 코드로 바로 전환될수 있는 완성된 디자인은 아니며, 다른 상황에 맞게 사용될 수 있는 문제들을 해결하는데에 쓰이는 서술이나 템플릿이다. 디자인 패턴은 프로그래머가 어플리케이션이나 시스템을 디자인할 때 공통된 문제들을 해결하는데에 쓰이는 형식화 된 가장 좋은 관행이다.
디자인 패턴을 이용할 경우, 역할분담이 용이해지며 이에 따라 편리성이 좋아진다.

##MVC(MODEL-VIEW-CONTROLLER)
사용자가 Controller를 조작하면 Controller는 Model을 통해서 데이터를 가져오고 그 정보를 바탕으로 시각적인 표현을 담당하는 View를 제어해서 사용자에게 전달하게 된다. 
위의 개념을 웹에 적용하면, 
1. 사용자가 웹사이트에 접속한다. (Uses)
2. Controller는 사용자가 요청한 웹페이지를 서비스 하기 위해서 모델을 호출한다. (Manipulates)
3. 모델은 데이터베이스나 파일과 같은 데이터 소스를 제어한 후에 그 결과를 리턴한다.
4. Controller는 Model이 리턴한 결과를 View에 반영한다. (Updates)
5. 데이터가 반영된 VIew는 사용자에게 보여진다. (Sees)
Controller
사용자가 접근 한 URL에 따라서 사용자의 요청사항을 파악한 후에 그 요청에 맞는 데이터를 Model에 의뢰하고, 데이터를 View에 반영해서 사용자에게 알려준다. 
Model
일반적으로 CI의 모델은 데이터베이스 테이블에 대응된다. 이를테면 Topic이라는 테이블은 topic_model이라는 Model을 만든다. 그런데 이 관계가 강제적이지 않기 때문에 규칙을 일관성 있게 정의하는 것이 필요하다.
View
View는 클라이언트 측 기술인 html/css/javascript들을 모아둔 컨테이너이다. 