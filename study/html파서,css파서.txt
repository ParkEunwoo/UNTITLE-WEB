<html 파싱>
1. html 파서는 html 마크업을 파싱 트리로 변환
2. html은 문맥 자유 문법에 의해 쉽게 정의할 수 없기 때문에 일반적인 파서로 파싱하기 어려움 -> 브라우저는 별도의 파서를 생성 (파싱 알고리즘)
3. 파싱 알고리즘 : 토큰화 & 트리 구축
	- 토큰화 : 어휘 분석
		입력값을 토큰으로 파싱 (html에서 토큰은 시작, 종료 태그, 속성 이름, 속성값) 
		토큰을 인지해서 트리생성자로 넘기고 다음 토큰 확인 위해 다음 문자 확인
		입력의 마지막까지 과정 반복	
	- 트리 구축 : 파서가 생성되면 문서 객체가 생성
		    트리 구축이 진행되는 동안 문서 최상단에는 DOM트리가 수정, 요소가 추가
		    

<css 파싱>
1. css는 문맥 자유 문법이므로 상향식, 하향식 파서로 파싱이 가능함
2. 웹킷 css 파서
	- css 문법 파일로부터 자동으로 파서를 생성하기 위해 플렉스, 바이슨 파서 생성기를 사용
	- 두 경우 모두 css파일은 시타일 시트 객체로 파싱, 각 객체는 css 규칙을 포함
	- css 규칙 객체는 선택자, 선언 객체, css 문법과 일피하는 다른 객체를 포함
              - 스타일 시트 : 스타일 시트는 DOM 트리를 변경하지 않기 때문에 문서 파싱을 기다리거나 중단할 이유가 없음
		      그러나 스크립트가 문서를 파싱하는 동안 스타일 정보를 요청하는 경우라면 문제가 된다. 
		      스타일이 파싱되지 않은 상태라면 스크립트는 잘못된 결과를 내놓기 때문에 많은 문제를 야기함 
		      따라서 파이어폭스는 아직 로드 중이거나 파싱 중인 스타일 시트가 있는 경우 모든 스크립트의 실행을 중단함
		      웹킷은 로드되지 않은 스타일 시트 가운데 문제가 될만한 속성이 있을 때에만 스크립트를 중단함